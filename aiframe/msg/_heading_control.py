# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aiframe/heading_control.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class heading_control(genpy.Message):
  _md5sum = "5728ee4f98d7b3a0fdec811141395b45"
  _type = "aiframe/heading_control"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 local_x
float64 local_y
float64 local_z
float64 v_x
float64 v_y
float64 v_z
float64 a_x
float64 a_y
float64 a_z
float64 yaw
float64 yaw_rate
int64 flight_mode
"""
  __slots__ = ['local_x','local_y','local_z','v_x','v_y','v_z','a_x','a_y','a_z','yaw','yaw_rate','flight_mode']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       local_x,local_y,local_z,v_x,v_y,v_z,a_x,a_y,a_z,yaw,yaw_rate,flight_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(heading_control, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.local_x is None:
        self.local_x = 0.
      if self.local_y is None:
        self.local_y = 0.
      if self.local_z is None:
        self.local_z = 0.
      if self.v_x is None:
        self.v_x = 0.
      if self.v_y is None:
        self.v_y = 0.
      if self.v_z is None:
        self.v_z = 0.
      if self.a_x is None:
        self.a_x = 0.
      if self.a_y is None:
        self.a_y = 0.
      if self.a_z is None:
        self.a_z = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
      if self.flight_mode is None:
        self.flight_mode = 0
    else:
      self.local_x = 0.
      self.local_y = 0.
      self.local_z = 0.
      self.v_x = 0.
      self.v_y = 0.
      self.v_z = 0.
      self.a_x = 0.
      self.a_y = 0.
      self.a_z = 0.
      self.yaw = 0.
      self.yaw_rate = 0.
      self.flight_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11dq().pack(_x.local_x, _x.local_y, _x.local_z, _x.v_x, _x.v_y, _x.v_z, _x.a_x, _x.a_y, _x.a_z, _x.yaw, _x.yaw_rate, _x.flight_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.local_x, _x.local_y, _x.local_z, _x.v_x, _x.v_y, _x.v_z, _x.a_x, _x.a_y, _x.a_z, _x.yaw, _x.yaw_rate, _x.flight_mode,) = _get_struct_11dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11dq().pack(_x.local_x, _x.local_y, _x.local_z, _x.v_x, _x.v_y, _x.v_z, _x.a_x, _x.a_y, _x.a_z, _x.yaw, _x.yaw_rate, _x.flight_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.local_x, _x.local_y, _x.local_z, _x.v_x, _x.v_y, _x.v_z, _x.a_x, _x.a_y, _x.a_z, _x.yaw, _x.yaw_rate, _x.flight_mode,) = _get_struct_11dq().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11dq = None
def _get_struct_11dq():
    global _struct_11dq
    if _struct_11dq is None:
        _struct_11dq = struct.Struct("<11dq")
    return _struct_11dq
