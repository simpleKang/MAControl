# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aiframe/simulationMessageList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import aiframe.msg

class simulationMessageList(genpy.Message):
  _md5sum = "c36f9f7094c8b7e0ea26d812607a808d"
  _type = "aiframe/simulationMessageList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """simulationMessage[] simulationMessageList

================================================================================
MSG: aiframe/simulationMessage
uint16 vehicle_id
int64 utc
uint32 relative_alt
int16 north_velocity
int16 east_velocity
int16 vertical_velocity
uint16 hdg
float32 rollspeed
float32 pitchspeed
float32 yawspeed
float64 local_accelerationx
float64 local_accelerationy
float64 local_accelerationz
float64 roll
float64 pitch
float64 yaw
float64 local_x
float64 local_y
float64 local_z
float64 local_vx
float64 local_vy
float64 local_vz
float64 longitude
float64 latitude
float64 altitude"""
  __slots__ = ['simulationMessageList']
  _slot_types = ['aiframe/simulationMessage[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       simulationMessageList

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(simulationMessageList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.simulationMessageList is None:
        self.simulationMessageList = []
    else:
      self.simulationMessageList = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.simulationMessageList)
      buff.write(_struct_I.pack(length))
      for val1 in self.simulationMessageList:
        _x = val1
        buff.write(_get_struct_HqI3hH3f15d().pack(_x.vehicle_id, _x.utc, _x.relative_alt, _x.north_velocity, _x.east_velocity, _x.vertical_velocity, _x.hdg, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.local_accelerationx, _x.local_accelerationy, _x.local_accelerationz, _x.roll, _x.pitch, _x.yaw, _x.local_x, _x.local_y, _x.local_z, _x.local_vx, _x.local_vy, _x.local_vz, _x.longitude, _x.latitude, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.simulationMessageList is None:
        self.simulationMessageList = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.simulationMessageList = []
      for i in range(0, length):
        val1 = aiframe.msg.simulationMessage()
        _x = val1
        start = end
        end += 154
        (_x.vehicle_id, _x.utc, _x.relative_alt, _x.north_velocity, _x.east_velocity, _x.vertical_velocity, _x.hdg, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.local_accelerationx, _x.local_accelerationy, _x.local_accelerationz, _x.roll, _x.pitch, _x.yaw, _x.local_x, _x.local_y, _x.local_z, _x.local_vx, _x.local_vy, _x.local_vz, _x.longitude, _x.latitude, _x.altitude,) = _get_struct_HqI3hH3f15d().unpack(str[start:end])
        self.simulationMessageList.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.simulationMessageList)
      buff.write(_struct_I.pack(length))
      for val1 in self.simulationMessageList:
        _x = val1
        buff.write(_get_struct_HqI3hH3f15d().pack(_x.vehicle_id, _x.utc, _x.relative_alt, _x.north_velocity, _x.east_velocity, _x.vertical_velocity, _x.hdg, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.local_accelerationx, _x.local_accelerationy, _x.local_accelerationz, _x.roll, _x.pitch, _x.yaw, _x.local_x, _x.local_y, _x.local_z, _x.local_vx, _x.local_vy, _x.local_vz, _x.longitude, _x.latitude, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.simulationMessageList is None:
        self.simulationMessageList = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.simulationMessageList = []
      for i in range(0, length):
        val1 = aiframe.msg.simulationMessage()
        _x = val1
        start = end
        end += 154
        (_x.vehicle_id, _x.utc, _x.relative_alt, _x.north_velocity, _x.east_velocity, _x.vertical_velocity, _x.hdg, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.local_accelerationx, _x.local_accelerationy, _x.local_accelerationz, _x.roll, _x.pitch, _x.yaw, _x.local_x, _x.local_y, _x.local_z, _x.local_vx, _x.local_vy, _x.local_vz, _x.longitude, _x.latitude, _x.altitude,) = _get_struct_HqI3hH3f15d().unpack(str[start:end])
        self.simulationMessageList.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HqI3hH3f15d = None
def _get_struct_HqI3hH3f15d():
    global _struct_HqI3hH3f15d
    if _struct_HqI3hH3f15d is None:
        _struct_HqI3hH3f15d = struct.Struct("<HqI3hH3f15d")
    return _struct_HqI3hH3f15d
