# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aiframe/simulationMessage.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class simulationMessage(genpy.Message):
  _md5sum = "5cdfa5277bd1072edcd858fe43cee4a2"
  _type = "aiframe/simulationMessage"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 vehicle_id
int64 utc
uint32 relative_alt
int16 north_velocity
int16 east_velocity
int16 vertical_velocity
uint16 hdg
float32 rollspeed
float32 pitchspeed
float32 yawspeed
float64 local_accelerationx
float64 local_accelerationy
float64 local_accelerationz
float64 roll
float64 pitch
float64 yaw
float64 local_x
float64 local_y
float64 local_z
float64 local_vx
float64 local_vy
float64 local_vz
float64 longitude
float64 latitude
float64 altitude"""
  __slots__ = ['vehicle_id','utc','relative_alt','north_velocity','east_velocity','vertical_velocity','hdg','rollspeed','pitchspeed','yawspeed','local_accelerationx','local_accelerationy','local_accelerationz','roll','pitch','yaw','local_x','local_y','local_z','local_vx','local_vy','local_vz','longitude','latitude','altitude']
  _slot_types = ['uint16','int64','uint32','int16','int16','int16','uint16','float32','float32','float32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehicle_id,utc,relative_alt,north_velocity,east_velocity,vertical_velocity,hdg,rollspeed,pitchspeed,yawspeed,local_accelerationx,local_accelerationy,local_accelerationz,roll,pitch,yaw,local_x,local_y,local_z,local_vx,local_vy,local_vz,longitude,latitude,altitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(simulationMessage, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vehicle_id is None:
        self.vehicle_id = 0
      if self.utc is None:
        self.utc = 0
      if self.relative_alt is None:
        self.relative_alt = 0
      if self.north_velocity is None:
        self.north_velocity = 0
      if self.east_velocity is None:
        self.east_velocity = 0
      if self.vertical_velocity is None:
        self.vertical_velocity = 0
      if self.hdg is None:
        self.hdg = 0
      if self.rollspeed is None:
        self.rollspeed = 0.
      if self.pitchspeed is None:
        self.pitchspeed = 0.
      if self.yawspeed is None:
        self.yawspeed = 0.
      if self.local_accelerationx is None:
        self.local_accelerationx = 0.
      if self.local_accelerationy is None:
        self.local_accelerationy = 0.
      if self.local_accelerationz is None:
        self.local_accelerationz = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.local_x is None:
        self.local_x = 0.
      if self.local_y is None:
        self.local_y = 0.
      if self.local_z is None:
        self.local_z = 0.
      if self.local_vx is None:
        self.local_vx = 0.
      if self.local_vy is None:
        self.local_vy = 0.
      if self.local_vz is None:
        self.local_vz = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.altitude is None:
        self.altitude = 0.
    else:
      self.vehicle_id = 0
      self.utc = 0
      self.relative_alt = 0
      self.north_velocity = 0
      self.east_velocity = 0
      self.vertical_velocity = 0
      self.hdg = 0
      self.rollspeed = 0.
      self.pitchspeed = 0.
      self.yawspeed = 0.
      self.local_accelerationx = 0.
      self.local_accelerationy = 0.
      self.local_accelerationz = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.local_x = 0.
      self.local_y = 0.
      self.local_z = 0.
      self.local_vx = 0.
      self.local_vy = 0.
      self.local_vz = 0.
      self.longitude = 0.
      self.latitude = 0.
      self.altitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HqI3hH3f15d().pack(_x.vehicle_id, _x.utc, _x.relative_alt, _x.north_velocity, _x.east_velocity, _x.vertical_velocity, _x.hdg, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.local_accelerationx, _x.local_accelerationy, _x.local_accelerationz, _x.roll, _x.pitch, _x.yaw, _x.local_x, _x.local_y, _x.local_z, _x.local_vx, _x.local_vy, _x.local_vz, _x.longitude, _x.latitude, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 154
      (_x.vehicle_id, _x.utc, _x.relative_alt, _x.north_velocity, _x.east_velocity, _x.vertical_velocity, _x.hdg, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.local_accelerationx, _x.local_accelerationy, _x.local_accelerationz, _x.roll, _x.pitch, _x.yaw, _x.local_x, _x.local_y, _x.local_z, _x.local_vx, _x.local_vy, _x.local_vz, _x.longitude, _x.latitude, _x.altitude,) = _get_struct_HqI3hH3f15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HqI3hH3f15d().pack(_x.vehicle_id, _x.utc, _x.relative_alt, _x.north_velocity, _x.east_velocity, _x.vertical_velocity, _x.hdg, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.local_accelerationx, _x.local_accelerationy, _x.local_accelerationz, _x.roll, _x.pitch, _x.yaw, _x.local_x, _x.local_y, _x.local_z, _x.local_vx, _x.local_vy, _x.local_vz, _x.longitude, _x.latitude, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 154
      (_x.vehicle_id, _x.utc, _x.relative_alt, _x.north_velocity, _x.east_velocity, _x.vertical_velocity, _x.hdg, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.local_accelerationx, _x.local_accelerationy, _x.local_accelerationz, _x.roll, _x.pitch, _x.yaw, _x.local_x, _x.local_y, _x.local_z, _x.local_vx, _x.local_vy, _x.local_vz, _x.longitude, _x.latitude, _x.altitude,) = _get_struct_HqI3hH3f15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HqI3hH3f15d = None
def _get_struct_HqI3hH3f15d():
    global _struct_HqI3hH3f15d
    if _struct_HqI3hH3f15d is None:
        _struct_HqI3hH3f15d = struct.Struct("<HqI3hH3f15d")
    return _struct_HqI3hH3f15d
